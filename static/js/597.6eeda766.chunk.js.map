{"version":3,"file":"static/js/597.6eeda766.chunk.js","mappings":"+PAGe,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGACUC,MAAM,sCAAD,OACMP,EADN,qEAG/BQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAN,IACNF,MAAK,SAAAC,GAAC,OAAIA,EAAEE,IAAN,IACNC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IANK,OACbG,EADa,OAOnBZ,GAAgB,OAAIY,IAPD,2CAAH,qDAUlBV,GACD,GAAE,CAACN,KAGF,wBACGG,EAAac,KAAI,SAAAC,GAAK,mBACrB,2BACE,gBACEC,IAAG,mDAAoCD,EAAME,qBAA1C,QAA4D,GAC/DC,IAAG,UAAEH,EAAMI,YAAR,QAAgB,aAErB,iCAAIJ,EAAMI,YAAV,QAAkB,aAClB,iDAAeJ,EAAMK,iBAArB,QAAkC,cAClC,oBAPOL,EAAMM,QADM,KAa5B,C,gFChCc,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,EAClD,CDES,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["components/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [movieCredits, setMovieCredits] = useState([]);\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      const fetchedCredits = await fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=15d494776c3d35f24fb32811ec733217&language=en-US`\n      )\n        .then(r => r.json())\n        .then(r => r.cast)\n        .catch(error => console.log(error));\n      setMovieCredits([...fetchedCredits]);\n    };\n\n    fetchCredits();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {movieCredits.map(actor => (\n        <li key={actor.cast_id}>\n          <img\n            src={`https://image.tmdb.org/t/p/w200${actor.profile_path}` ?? ''}\n            alt={actor.name ?? 'Unknown'}\n          />\n          <p>{actor.name ?? 'Unknown'}</p>\n          <p>Character: {actor.character ?? 'Unknown'}</p>\n          <hr />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["Cast","movieId","useParams","useState","movieCredits","setMovieCredits","useEffect","fetchCredits","fetch","then","r","json","cast","catch","error","console","log","fetchedCredits","map","actor","src","profile_path","alt","name","character","cast_id","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}